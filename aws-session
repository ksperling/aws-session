#!/bin/bash
# aws-session: Run a shell environment with AWS MFA credentials
version=HEAD
set -o pipefail

function main() {
  have_cmd aws || fail 2 "Command 'aws' unavailable, ensure aws-cli is installed"
  local usage="Usage: ${0##*/} [--profile PROFILE] [--code CODE] [--session-duration SECONDS] [shell|exec|provision-mfa]"

  while [[ $# -gt 0 && "$1" =~ ^- ]]; do
    case "$1" in
      --profile)
        optarg_required "$@"
        export AWS_DEFAULT_PROFILE="$2"
        shift 2
        ;;
      --session-duration)
        optarg_required "$@"
        [[ "$2" =~ ^[0-9]+$ ]] || fail 1 "Option $1 argument must be a number in seconds"
        export AWS_SESSION_DURATION="$2"
        shift 2
        ;;
      --code)
        optarg_required "$@"
        export AWS_SESSION_MFA_CODE="$2"
        shift 2
        ;;
      --debug) export AWS_SESSION_DEBUG=1; shift;;
      --version) version; exit 0;;
      --help) echo "$usage
Options:
  --profile PROFILE            set profile from ~/.aws, see AWS_DEFAULT_PROFILE
  --code CODE                  set the MFA code directly (non-interactive)
  --session-duration SECONDS   requested session validity (default 12 hours)
  --debug                      enable debug output
  --version                    display version information
  --help                       display this help text

Commands:
  shell                        run an interactive shell (default)
  exec COMMAND [ARGS ...]      run the specified command
  provision-mfa                configure a new virtual MFA device

Environment variables:
  AWS_DEFAULT_PROFILE          default value for --profile
  AWS_SESSION_MFA_CODE         default value for --code
  AWS_SESSION_DURATION         default value for --session-duration
  AWS_SESSION_DEBUG            1/0 default value for --debug
  AWS_SESSION_COLOR            1/0 to enable/disable colored prompt"; exit 0;;
      --) shift; break;;
      *) fail 1 "$usage";;
    esac
  done

  local cmd=shell; if [[ $# -gt 0 ]]; then cmd="$1"; shift; fi
  case "$cmd" in
    exec|shell|refresh) "session_${cmd}" "$@";;
    provision-mfa) provision_mfa "$@";;
    *) fail 1 "$usage";;
  esac
}

function version() {
  local cli="$(command aws --version 2>&1)"
  if [[ "$cli" =~ ^aws-cli/([0-9]+)\.([0-9]+)\. ]]; then
    echo "aws-session/${version} ${cli}"
    local maj="${BASH_REMATCH[1]}" min="${BASH_REMATCH[2]}"
    if [[ "$maj" -lt 1 || "$maj" -eq 1 && "$min" -lt 11 ]]; then
      info "Warning: aws-session may not work correctly with aws-cli < 1.11"
    fi
  else
    echo "aws-session/${version} aws-cli/unknown"
  fi
}

function session_exec() { # cmd args ...
  [[ $# -ge 1 ]] || fail 1 "Usage: ${0##*/} exec COMMAND [ARGS...]"
  establish_mfa_session || return $?
  exec "$@"
}

function session_shell() {
  [[ $# -eq 0 ]] || fail 1 "Usage: ${0##*/} shell"

  # Export some information that our shell functions use
  export AWS_SESSION; call AWS_SESSION=normalize "$0"
  if [[ -z "$AWS_SESSION_COLOR" ]]; then
    export AWS_SESSION_COLOR=0; local colors
    colors="$(tput colors 2>/dev/null)" && [[ "$colors" -ge 8 ]] && AWS_SESSION_COLOR=1
  fi

  # If AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY already come from the environment
  # we need to preserve their values, as we will need them when we want to do a refresh.
  if [[ -n "$AWS_ACCESS_KEY_ID" && -n "$AWS_SECRET_ACCESS_KEY" ]]; then
    debug "Preserving AWS credentials from environment ($AWS_ACCESS_KEY_ID)"
    export AWS_SESSION_PARENT_KEY="$AWS_ACCESS_KEY_ID"
    export AWS_SESSION_PARENT_SECRET="$AWS_SECRET_ACCESS_KEY"
    export AWS_SESSION_PARENT_TOKEN="${AWS_SESSION_TOKEN:-$AWS_SECURITY_TOKEN}"
  else
    unset AWS_SESSION_PARENT_{KEY,SECRET,TOKEN}
  fi

  establish_mfa_session || return $?

  # Exec an interactive shell, with advanced support for bash and zsh
  local shell="${SHELL##*/}"; [[ "$shell" != sh && "$SHELL" = "$BASH" ]] && shell=bash
  case "$shell" in
    bash)
      # bash --rcfile lets us load custom bashrc. Note this doesn't work when running bash as 'sh'
      exec "$SHELL" --rcfile <(generate_bashrc) -i
      ;;
    zsh)
      # zsh doesn't have anything like '--rcfile', so we have to hook the entire ZDOTDIR
      local dotdir="$HOME/.aws-session"
      if ( umask 077 && mkdir -p "$dotdir" 2>/dev/null && generate_zdotdir "$dotdir" ); then
        export AWS_SESSION_ZDOTREAL="${ZDOTDIR:-$HOME}"
        export AWS_SESSION_ZDOTDIR="$dotdir" ZDOTDIR="$dotdir"
      else
        info "Warning: Unable to create ~/.aws-session, advanced zsh features will be unavailable"
      fi
      exec "$SHELL" -i
      ;;
    *)
      info "Note: $SHELL does not appear to be a supported shell (bash, zsh), advanced features will be unavailable"
      exec "$SHELL" -i
      ;;
  esac
}

function session_refresh() {
  # Clear out the session credentials first, we need to use the original credentials to get
  # the new token. Note that the AWS CLI doesn't like empty values in these variables; if a
  # value doesn't apply it needs to be unset rather than just set to an empty string.
  if [[ -n "$AWS_SESSION_PARENT_KEY" && -n "$AWS_SESSION_PARENT_SECRET" ]]; then
    export AWS_ACCESS_KEY_ID="$AWS_SESSION_PARENT_KEY"
    export AWS_SECRET_ACCESS_KEY="$AWS_SESSION_PARENT_SECRET"
    if [[ -n "$AWS_SESSION_PARENT_TOKEN" ]]; then
      export AWS_SESSION_TOKEN="$AWS_SESSION_PARENT_TOKEN"
    else
      unset AWS_SESSION_TOKEN
    fi
    debug "Restored AWS credentials in environment ($AWS_ACCESS_KEY_ID)"
  else
    unset AWS_{ACCESS_KEY_ID,SECRET_ACCESS_KEY,SESSION_TOKEN}
  fi
  unset AWS_SECURITY_TOKEN
  establish_mfa_session || return $?

  echo "export AWS_ACCESS_KEY_ID='$AWS_ACCESS_KEY_ID'
export AWS_SECRET_ACCESS_KEY='$AWS_SECRET_ACCESS_KEY'
export AWS_SESSION_TOKEN='$AWS_SESSION_TOKEN'
export AWS_SESSION_EXPIRATION='$AWS_SESSION_EXPIRATION'
export AWS_SECURITY_TOKEN=\"\$AWS_SESSION_TOKEN\" # legacy name"
}

function establish_mfa_session() {
  local user mfa code opts=() expires

  if [[ -z "$AWS_SESSION_MFADEVICE" ]]; then
    call user=aws_iam_username || return $?
    debug "IAM username: $user"
    call mfa=aws_mfa_lookup "$user" || return $?
    [[ -n "$mfa" ]] || fail 10 "IAM user '$user' has no MFA device configured"
    export AWS_SESSION_MFADEVICE="$mfa" # retain for sub-shell refreshes
    debug "MFA device: $mfa"
  else
    mfa="$AWS_SESSION_MFADEVICE"
    debug "MFA device: $mfa (cached)"
  fi

  if [ -z "$AWS_SESSION_MFA_CODE" ]; then
    call code=prompt_mfa_code || return $?
  else
    code="$AWS_SESSION_MFA_CODE"
    unset AWS_SESSION_MFA_CODE
  fi

  [[ "${AWS_SESSION_DURATION:-0}" -gt 0 ]] && opts+=(--duration-seconds "$AWS_SESSION_DURATION")
  aws_query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken,Expiration]' \
      sts get-session-token --serial-number "$mfa" --token-code "$code" "${opts[@]}" || return $?

  IFS=$'\t' read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN expires <<<"$REPLY"
  call AWS_SESSION_EXPIRATION=parse_utciso "$expires" || oops "unable to parse iso datetime '$expires'"
  debug "Session token expiration: $expires"

  export AWS_{ACCESS_KEY_ID,SECRET_ACCESS_KEY,SESSION_TOKEN,SESSION_EXPIRATION}
  export AWS_SECURITY_TOKEN="$AWS_SESSION_TOKEN" # legacy name
}

function provision_mfa() {
  ( local user mfa code1 code2
    call user=aws_iam_username || return $?
    debug "IAM username: $user"
    call mfa=aws_mfa_lookup "$user" || return $?
    if [[ -n "$mfa" ]]; then
      debug "MFA device: $mfa"
      fail 10 "IAM user '$user' already has an MFA device configured"
    fi

    trap 'test -n "$mfa" && aws_mfa_delete "$mfa"; unset mfa' exit
    call mfa=aws_mfa_create "$user" || return $?

    info "Import the QR code into your authenticator app, then enter two consecutive codes"
    call code1=prompt_mfa_code "the 1st"
    call code2=prompt_mfa_code "the 2nd"

    debug "Activating MFA device $mfa"
    aws iam enable-mfa-device --user-name "$user" --serial-number "$mfa" \
      --authentication-code-1 "$code1" --authentication-code-2 "$code2" || return $?

    info "Virtual MFA device $mfa activated successfully for user '$user'"
    unset mfa # activation successful, don't delete
  )
}

function prompt_mfa_code() { # [description] ->REPLY
  unset REPLY
  until [[ "$REPLY" =~ ^[0-9]{6}$ ]]; do
    [[ -n "$REPLY" ]] && info "Not a valid code: $REPLY"
    read -re -p "Please enter ${1:-your} 6 digit MFA code: " || return $?
  done
}

function aws_mfa_create_internal() { # name
  # The AWS CLI insists on writing the QR code PNG to a file, and check that the
  # path refers to a writable directory. We want it to write to a pipe (fd 3)
  # instead to avoid writing the MFA parameters to disk. We then swap FD 3<->1,
  # pipe the PNG image through the rendering pipeline, and then swap the FDs back.
  { ( local td; call td=mktmpdir mfa && \
      trap 'rm -rf -- "$td"' exit && \
      ln -sf /dev/fd/3 "${td}/png" && \
      aws iam create-virtual-mfa-device \
        --virtual-mfa-device-name "$1" --bootstrap-method QRCodePNG --outfile "${td}/png" \
        --output text --query VirtualMFADevice.SerialNumber
  ) 4>&1 1>&3 3>&4 4>&- | img_png_qr_ansi; } 4>&1 1>&3 3>&4 4>&- || return "${PIPESTATUS[0]}"
}

function aws_mfa_create() { # name ->REPLY
  { REPLY="$(aws_mfa_create_internal "$1")"; } 3>&1 || return $?
  debug "Created MFA device $REPLY"
}

function aws_mfa_delete() { # arn
  debug "Deleting MFA device $1"
  aws iam delete-virtual-mfa-device --serial "$1"
}

function aws_mfa_lookup() { # username ->REPLY
  aws_query 'MFADevices[*].SerialNumber' iam list-mfa-devices --user-name "$1"
}

function aws_iam_username() { # ->REPLY
  aws_query Arn sts get-caller-identity || return $?
  if [[ "$REPLY" =~ ^arn:aws:iam::[0-9]+:user/(.*)$ ]]; then
    REPLY="${BASH_REMATCH[1]}"
  else
    debug "ARN '$REPLY' is not an IAM user"
    return 1
  fi
}

function aws_query { # query args... ->REPLY
  REPLY="$(aws "${@:2}" --output text --query "$1")"
}

function aws() { # args ...
  debug "+aws $*"
  command aws "$@"
}

function debug() { # message
  [[ "${AWS_SESSION_DEBUG:-0}" -le 0 ]] || info "$@"
}


function generate_common_rc() {
  echo $'# aws-session / common
function aws-session-valid() {
  [[ "$(date +%s)" -lt "${AWS_SESSION_EXPIRATION:-0}" ]]
}
function aws-session-refresh() {
  local env; env="$("${AWS_SESSION:-aws-session}" "$@" refresh)" || return $?; eval "$env"
}
function aws-session-prompt() {
  local rc="$?" # preserve exit code for other prompt hooks
  # For bash we could just echo our pre-prompt (with -n), but in zsh the output
  # would just get overwritten by the actual prompt. Modify PS1 instead.
  if [[ "${PS1:0:4}" = "(aws" ]]; then # tedious but portable
    local i=8 n="${#PS1}"
    while [[ i < n && "${PS1:$i:1}" != ")" ]]; do let i++; done
    while [[ i < n && "${PS1:$i:1}" != " " ]]; do let i++; done
    let i++; PS1="${PS1:$i}"
  fi
  local exp sym=+ clr= rst= e=$\'\\e\'; (( exp = AWS_SESSION_EXPIRATION - $(date +%s) ))
  if [[ "${AWS_SESSION_COLOR:-0}" -gt 0 && "$exp" -lt 300 ]]; then
    clr="${e}[$(( exp >= 60 ? 33 : 31 ))m" rst="${e}[39m"
    [[ -n "$BASH_VERSION" ]] && clr="\\[$clr\\]" rst="\\[$rst\\]"
  fi
  if (( exp >= 6000 )); then exp="$(( exp / 3600 ))h"
  elif (( exp >= 100 )); then exp="$(( exp / 60 ))m"
  elif (( exp > 0 )); then exp="${exp}s"
  else exp=exp sym=\'!\'; fi
  [[ "${#exp}" -ge 3 ]] || exp="0$exp"
  PS1="(aws${sym}${clr}${exp}${rst}) $PS1"
  return "$rc"
}
function aws() {
  aws-session-valid || aws-session-refresh && command aws "$@"
}'
}

function generate_bashrc() {
  generate_common_rc
  echo $' # aws-session / bashrc
[[ -f ~/.bashrc ]] && source ~/.bashrc
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND;}aws-session-prompt"'
}

function generate_zdotdir() { # dir
  debug "Generating zsh environment in $1"
  # See http://zsh.sourceforge.net/Doc/Release/Files.html#Startup_002fShutdown-Files
  { echo -n $'# aws-session / zshenv
if [ -f "$AWS_SESSION_ZDOTREAL/.zshenv" ]; then
  ZDOTDIR="$AWS_SESSION_ZDOTREAL"
  source "$ZDOTDIR/.zshenv"
  ZDOTDIR="$AWS_SESSION_ZDOTDIR"
fi
'; } >"$1/.zshenv"
  { generate_common_rc
    echo -n $'# aws-session / zshrc
precmd_functions+=(aws-session-prompt)

if [ -f "$AWS_SESSION_ZDOTREAL/.zshrc" ]; then
  ZDOTDIR="$AWS_SESSION_ZDOTREAL"
  source "$ZDOTDIR/.zshrc"
  ZDOTDIR="$AWS_SESSION_ZDOTDIR"
fi
'; } >"$1/.zshrc"
}


function img_png_qr_ansi() {
  img_parse_png | img_trim_qr | img_ansi
}

function img_trim_qr() {
  # Skip leading blank lines and find the start of the positioning pattern. The
  # positioning pattern is 7 modules wide (and high), this can be used to work
  # out the scale of pixels per module. Finally scale down and trim to the minimum
  # required quiet zone (4 modules)
  read -r || return $? # no input
  until [[ "$REPLY" =~ \# ]]; do read -r || break; done
  if ! [[ "$REPLY" =~ ^(\ *)(\#+)(.*\#+)\ *$ ]]; then
    info "Invalid QR code"
    return 4
  fi
  local l1="${#BASH_REMATCH[1]}" l2="${#BASH_REMATCH[2]}" l3="${#BASH_REMATCH[3]}" ll="${#REPLY}"
  local scale trim len; (( scale = l2 / 7, trim = l1 - 4*scale, len = l2 + l3 + 8*scale ))
  if (( scale == 0 )) || (( trim < 0 || trim + len > ll || len % scale != 0 )); then
    info "Invalid QR code"
    return 4
  fi
  { # shellcheck disable=SC2155
    local quiet="$(printf "% ${len}s")" line=0
    echo -e "${quiet}\n${quiet}\n${quiet}\n${quiet}"
    while true; do
      [[ "$REPLY" =~ \# ]] && (( line++ % scale == 0 )) && echo "${REPLY:$trim:$len}"
      read -r || break
    done
    echo -e "${quiet}\n${quiet}\n${quiet}\n${quiet}"
  } | img_scale_x "$scale" 2
}

function img_parse_png() {
  if have_cmd convert; then
    img_parse_png_convert
  elif have_cmd sips && [[ "$(uname -s)" = Darwin ]]; then
    img_parse_png_sips
  else
    info "No PNG parser available, try installing ImageMagick"
    return 2
  fi
}

function img_parse_png_convert() {
  # Convert to uncompressed PBM (a text-based format) and post-process
  convert png:- -compress none pbm:- 2>/dev/null | img_parse_pbm
}

function img_parse_png_sips() {
  # OS X ships with an image conversion utility called 'sips'. Unfortunately
  # it refuses to read/write pipes, so temporary files are used. The simplest
  # output format supported by sips is BMP.
  ( local td; call td=mktmpdir sips && \
    trap 'rm -rf -- "$td"' exit && \
    cat >"${td}/i.png" && \
    sips --setProperty format bmp "${td}/i.png" --out "${td}/o.bmp" >/dev/null && \
    img_parse_bmp <"${td}/o.bmp"
  )
}

function img_parse_pbm() {
  local fmt iw ih b=; read -r fmt || return 7; read -r iw ih
  if [[ "$fmt" = P1 && "$iw" -gt 0 && "$ih" -gt 0 ]]; then
    tr -cd 01 | while IFS= read -rn "$iw"; do echo "$REPLY"; done | tr 01 ' #'
  else
    info "Unsupported PBM format ($fmt)"
    return 3
  fi
}

function img_parse_bmp() {
  if [[ "$(echo -n ABCD | hexdump -e '1/4 "%x"')" != "44434241" ]]; then
    info "BMP decoding is only supported on little-endian systems"
    return 2
  fi
  local b; b=($(read_binary 0 54 '1/2 "%u" 4/4 " %u" 2/4 " %d" 2/2 " %u" 6/4 " %u"')) || return $?

  # This would look tidier (( magic=b[0], ofs=b[3]-54, iw=b[5], ih=b[6], bcp=b[7], bpp=b[8], cmp=b[9] ))
  # but triggers a segfault in bash 4.2: https://lists.gnu.org/archive/html/bug-bash/2016-02/msg00086.html
  local magic="${b[0]}" ofs="$((b[3]-54))" iw="${b[5]}" ih="${b[6]}" bcp="${b[7]}" bpp="${b[8]}" cmp="${b[9]}" tdn=0
  (( ih < 0 )) && (( tdn = 1, ih = -ih )) # negative height indicates origin in upper-left corner

  if (( magic == 19778 && bcp == 1 && bpp == 24 && cmp == 0 )); then # uncompressed RGB
    local run pad len; (( run = iw*3, pad = (iw*4 - run) % 4, len = (run + pad) * ih )) # rows are padded to 4 bytes
    read_binary "$ofs" "$len" "$run/1 \"%02x\" $pad/1 \"P\" \"\\n\"" \
    | tr -d P | img_scale_x 6 | tr '0-9a-f' '# ' | img_reorder_topdown "$tdn"

  elif (( magic == 19778 && bcp == 1 && bpp == 32 && ( cmp == 0 || cmp == 3) )); then # uncompressed/bitfields RGBA
    # Note that this just assumes RGBA format rather than actually looking at the bit masks in the header.
    # Also note that we're reading each pixel as 4 bytes rather than 1 dword so that the hexdump output is in RGBA
    # order, so that img_scale_x will use the R channel -- reading as a dword would result in ARGB -> A being used).
    read_binary "$ofs" $((iw*ih*4)) "$((iw*4))/1 \"%02x\" \"\\n\"" \
    | img_scale_x 8 | tr '0-9a-f' '# ' | img_reorder_topdown "$tdn"

  else
    info "Unsupported BMP format (${b[*]})"
    return 3
  fi
}

function img_reorder_topdown() { # topdown
  if [[ "$1" -gt 0 ]]; then cat; else sed '1!G;h;$!d'; fi
}

function img_scale_x() { # down [up]
  local dn="$1" up="${2:-1}" pat="\(.\)" rpl="\1"
  while (( dn-- > 1 )); do pat="${pat}."; done
  while (( up-- > 1 )); do rpl="${rpl}\1"; done
  sed "s/${pat}/$rpl/g"
}

function img_ansi() { 
  # Render using ANSI background colors to avoid unwanted gaps between "pixels"
  sed $'s/^/\e[47;107m/;s/\\(##*\\)/\e[40m\\1\e[47;107m/g;s/$/\e[0m/;y/#/ /'
}


function read_binary() { # skip bytes format
  # 'hexdump' itself appears to use buffered I/O so will read more than the
  # required number of bytes from stdin. Piping through 'dd' fixes this.
  # bs=1 gets inefficient very quickly, so read as much as possible using
  # a large block size, and handle the remainder and byte-based skipping
  # separately.
  { local bs=512 blk rem; (( blk = $2 / bs, rem = $2 % bs ))
    { [[ "$1" == 0 && "$rem" == 0 ]] || dd bs=1 skip="$1" count="$rem" 2>/dev/null; } && \
    { [[ "$blk" == 0 ]] || dd bs="$bs" count="$blk" 2>/dev/null; }
  } | hexdump -v -e "$3"
}

function parse_utciso() { # '%Y-%m-%dT%H:%M:%SZ' -> REPLY
  # Validate format first, GNU date is very slack with what it accepts
  REPLY=; [[ "$1" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$ ]] || return 1
  REPLY="$(date -j -u -f '%Y-%m-%dT%H:%M:%SZ' "$1" '+%s' 2>/dev/null)" \
  || REPLY="$(date -u --date="$1" '+%s')"
}

function normalize() { # path ->REPLY
  local dir base
  call dir=dirnm "$1"
  call base=basenm "$1"
  REPLY="$(cd "$dir" && echo "$PWD")/$base"
}

function basenm() { # path ->REPLY
  if [[ "$1" =~ ([^/]+)/*$ ]]; then REPLY="${BASH_REMATCH[1]}"
  elif [[ "$1" =~ / ]]; then REPLY=/
  else REPLY=; fi
}

function dirnm() { # path ->REPLY
  if [[ "$1" =~ ^(.*[^/])/+[^/]+/*$ ]]; then REPLY="${BASH_REMATCH[1]}"
  elif [[ "$1" =~ ^/ ]]; then REPLY=/
  else  REPLY=.; fi
}

function mktmpdir() { # [namepart] ->REPLY
  # Avoid -t due to differences between Linux and OS X (http://stackoverflow.com/a/31397073/2365113)
  REPLY="$(mktemp -d "${TMPDIR:-/tmp}/${1:-tmp}.XXXXXXXX")"
}

function optarg_required() { # "$@"
  [[ $# -ge 2 && ! "$2" =~ ^- ]] || fail 1 "Option $1 requires an argument"
}

function have_cmd() { # command
  hash "$1" 2>/dev/null
}

function oops() { # message
  fail 99 "Internal error: $1"
}

function fail() { # code message 
  echo "$2" >&2
  exit "$1"
}

function info() { # message
  echo "$1" >&2 || true
}

function call() { # var=func [args ...]
  unset REPLY; "${1#*=}" "${@:2}"; eval "${1%%=*}=\$REPLY; return $?"
}

[[ "${BASH_SOURCE[0]}" = "$0" ]] && main "$@"
